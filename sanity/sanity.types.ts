/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  publishedAt?: string;
  excerpt?: string;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  author?: string;
};

export type AboutPage = {
  _id: string;
  _type: "aboutPage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  headline?: string;
  aboutPhoto?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
  };
  content?: string;
  rulesForBuilding?: Array<{
    title?: string;
    description?: string;
    icon?: IconPicker;
    enabled?: boolean;
    _type: "rule";
    _key: string;
  }>;
};

export type SiteSettings = {
  _id: string;
  _type: "siteSettings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  profilePhoto?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
  };
  socialMedia?: Array<{
    name?: string;
    link?: string;
    text?: string;
    icon?: IconPicker;
    _type: "account";
    _key: string;
  }>;
  tinkeringWith?: {
    icon?: IconPicker;
    tech?: Array<{
      name?: string;
      url?: string;
      logo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      enabled?: boolean;
      _type: "technology";
      _key: string;
    }>;
  };
};

export type GalleryPhoto = {
  _id: string;
  _type: "galleryPhoto";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  altText?: string;
  photo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type HomePage = {
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  headline?: string;
  slugline?: string;
  bio?: string;
  gallery?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "galleryPhoto";
  }>;
};

export type IconPicker = {
  _type: "iconPicker";
  provider?: string;
  name?: string;
  svg?: string;
};

export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes = BlogPost | AboutPage | SiteSettings | GalleryPhoto | HomePage | IconPicker | SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | Slug | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanity/sanity.queries.ts
// Variable: homePageQuery
// Query: *[_type == 'homePage']{      ...,      gallery[] -> {        photo,        altText      }    }
export type HomePageQueryResult = Array<{
  _id: string;
  _type: "homePage";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  headline?: string;
  slugline?: string;
  bio?: string;
  gallery: Array<{
    photo: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    } | null;
    altText: string | null;
  }> | null;
}>;
// Variable: profilePhotoQuery
// Query: *[_type == 'siteSettings']{  profilePhoto}
export type ProfilePhotoQueryResult = Array<{
  profilePhoto: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
  } | null;
}>;
// Variable: socialMediaQuery
// Query: *[_type == 'siteSettings']{  socialMedia}
export type SocialMediaQueryResult = Array<{
  socialMedia: Array<{
    name?: string;
    link?: string;
    text?: string;
    icon?: IconPicker;
    _type: "account";
    _key: string;
  }> | null;
}>;
// Variable: aboutPageQuery
// Query: *[_type == 'aboutPage'][0]{  headline,  aboutPhoto,  content,  rulesForBuilding[enabled == true]{    title,    description,    icon,    enabled  }}
export type AboutPageQueryResult = {
  headline: string | null;
  aboutPhoto: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    altText?: string;
    _type: "image";
  } | null;
  content: string | null;
  rulesForBuilding: Array<{
    title: string | null;
    description: string | null;
    icon: IconPicker | null;
    enabled: boolean | null;
  }> | null;
} | null;
// Variable: blogPostsQuery
// Query: *[_type == 'blogPost'] | order(publishedAt desc)[0...3]{  title,  slug,  publishedAt,  excerpt}
export type BlogPostsQueryResult = Array<{
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  excerpt: string | null;
}>;
// Variable: allBlogPostsQuery
// Query: *[_type == 'blogPost'] | order(publishedAt desc){  title,  slug,  publishedAt,  excerpt,  author}
export type AllBlogPostsQueryResult = Array<{
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  excerpt: string | null;
  author: string | null;
}>;
// Variable: blogPostBySlugQuery
// Query: *[_type == 'blogPost' && slug.current == $slug][0]{  title,  slug,  publishedAt,  excerpt,  content,  author}
export type BlogPostBySlugQueryResult = {
  title: string | null;
  slug: Slug | null;
  publishedAt: string | null;
  excerpt: string | null;
  content: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  } | {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }> | null;
  author: string | null;
} | null;
// Variable: siteSettingsQuery
// Query: *[_type == 'siteSettings'][0]{  tinkeringWith}
export type SiteSettingsQueryResult = {
  tinkeringWith: {
    icon?: IconPicker;
    tech?: Array<{
      name?: string;
      url?: string;
      logo?: {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        _type: "image";
      };
      enabled?: boolean;
      _type: "technology";
      _key: string;
    }>;
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'homePage']{\n      ...,\n      gallery[] -> {\n        photo,\n        altText\n      }\n    }": HomePageQueryResult;
    "*[_type == 'siteSettings']{\n  profilePhoto\n}": ProfilePhotoQueryResult;
    "*[_type == 'siteSettings']{\n  socialMedia\n}": SocialMediaQueryResult;
    "*[_type == 'aboutPage'][0]{\n  headline,\n  aboutPhoto,\n  content,\n  rulesForBuilding[enabled == true]{\n    title,\n    description,\n    icon,\n    enabled\n  }\n}": AboutPageQueryResult;
    "*[_type == 'blogPost'] | order(publishedAt desc)[0...3]{\n  title,\n  slug,\n  publishedAt,\n  excerpt\n}": BlogPostsQueryResult;
    "*[_type == 'blogPost'] | order(publishedAt desc){\n  title,\n  slug,\n  publishedAt,\n  excerpt,\n  author\n}": AllBlogPostsQueryResult;
    "*[_type == 'blogPost' && slug.current == $slug][0]{\n  title,\n  slug,\n  publishedAt,\n  excerpt,\n  content,\n  author\n}": BlogPostBySlugQueryResult;
    "*[_type == 'siteSettings'][0]{\n  tinkeringWith\n}": SiteSettingsQueryResult;
  }
}
